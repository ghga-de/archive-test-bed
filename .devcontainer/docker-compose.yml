version: "3"

services:
  app:
    container_name: archive-test-bed
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        # Python version: 3, 3.11, 3.10, 3.9
        VARIANT: 3.9
        # You may need to change USER_UID and USER_GID if your local UID is different
        USER_UID: 1000
        USER_GID: 1000

    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_started

    init: true
    privileged: true

    volumes:
      - ..:/workspace:cached

    # Overrides default command so things don't shut down after the process ends.
    command: sleep infinity

    user: vscode
    env_file: tb.env
    environment:
      # you can override the testbed configuration here
      TB_CONFIG_YAML: /workspace/.devcontainer/tb.yaml

  wkvs:
    image: ghga/well-known-value-service:1.0.1
    restart: unless-stopped
    env_file: wkvs.env
    environment:
      WKVS_HOST: 0.0.0.0
      WKVS_PORT: 80
      WKVS_DCS_API_URL: http://dcs:8080
      WKVS_UCS_API_URL: http://ucs:8080
      WKVS_WPS_API_URL: http://wps:8080

  metldata:
    image: ghga/metldata:1.0.0
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_started
    env_file: metldata.env
    environment:
      METLDATA_HOST: 0.0.0.0
      METLDATA_PORT: 8080
      METLDATA_DB_CONNECTION_STR: mongodb://testbed_user:testbed_key@mongodb
      METLDATA_DB_NAME: metldata
      METLDATA_SERVICE_INSTANCE_ID: rest.1
      METLDATA_KAFKA_SERVERS: '["kafka:9092"]'
      METLDATA_PRIMARY_ARTIFACT_NAME: embedded_public
      METLDATA_PRIMARY_DATASET_NAME: EmbeddedDataset
      METLDATA_RESOURCE_CHANGE_EVENT_TOPIC: searchable_resources
      METLDATA_RESOURCE_DELETION_EVENT_TYPE: searchable_resource_deleted
      METLDATA_RESOURCE_UPSERTION_TYPE: searchable_resource_upserted
      METLDATA_DATASET_CHANGE_EVENT_TOPIC: metadata_datasets
      METLDATA_DATASET_DELETION_TYPE: dataset_deleted
      METLDATA_DATASET_UPSERTION_TYPE: dataset_created
    volumes:
      - ./metldata.yaml:/home/appuser/.metldata.yaml:ro
    ports:
      - 8002:8080

  mass:
    image: ghga/mass:1.0.1
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_started
      mass-consumer:
        condition: service_started
    environment:
      MASS_HOST: 0.0.0.0
      MASS_PORT: 8080
      MASS_SERVICE_INSTANCE_ID: rest.1
      MASS_DB_CONNECTION_STR: mongodb://testbed_user:testbed_key@mongodb
      MASS_DB_NAME: mass
      MASS_KAFKA_SERVERS: '["kafka:9092"]'
      MASS_RESOURCE_CHANGE_EVENT_TOPIC: searchable_resources
      MASS_RESOURCE_DELETION_EVENT_TYPE: searchable_resource_deleted
      MASS_RESOURCE_UPSERTION_EVENT_TYPE: searchable_resource_upserted
    command: "run-rest"
    volumes:
      - ./mass.yaml:/home/appuser/.mass.yaml:ro
    ports:
      - 8001:8080

  mass-consumer:
    image: ghga/mass:1.0.1
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_started
    environment:
      MASS_HOST: 0.0.0.0
      MASS_PORT: 8080
      MASS_SERVICE_INSTANCE_ID: consumer.1
      MASS_DB_CONNECTION_STR: mongodb://testbed_user:testbed_key@mongodb
      MASS_DB_NAME: mass
      MASS_KAFKA_SERVERS: '["kafka:9092"]'
      MASS_RESOURCE_CHANGE_EVENT_TOPIC: searchable_resources
      MASS_RESOURCE_DELETION_EVENT_TYPE: searchable_resource_deleted
      MASS_RESOURCE_UPSERTION_EVENT_TYPE: searchable_resource_upserted
    command: "consume-events"
    volumes:
      - ./mass.yaml:/home/appuser/.mass.yaml:ro

  ekss:
    image: ghga/encryption-key-store-service:1.0.1
    restart: unless-stopped
    depends_on:
      - vault
    env_file: ekss.env
    environment:
      EKSS_HOST: 0.0.0.0
      EKSS_PORT: 80
      EKSS_VAULT_URL: http://vault:8200
      EKSS_VAULT_PATH: ekss
      EKSS_VAULT_ROLE_ID: 9f03d595-c964-441c-a68e-2e1534f2bb56
      EKSS_VAULT_SECRET_ID: a3e80b1d-86d3-4c23-85ee-589031ec2cba

  dcs:
    image: ghga/download-controller-service:1.1.0
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_started
      dcs-consumer:
        condition: service_started
    env_file: dcs.env
    environment:
      DCS_SERVICE_INSTANCE_ID: rest.1
    command: "run-rest"
    volumes:
      - ./dcs.yaml:/home/appuser/.dcs.yaml:ro

  dcs-consumer:
    image: ghga/download-controller-service:1.1.0
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_started
    env_file: dcs.env
    environment:
      DCS_SERVICE_INSTANCE_ID: consumer.1
    command: "consume-events"
    volumes:
      - ./dcs.yaml:/home/appuser/.dcs.yaml:ro

  ifrs:
    image: ghga/internal-file-registry-service:1.1.0
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_started
    volumes:
      - ./ifrs.yaml:/home/appuser/.ifrs.yaml:ro

  ums:
    image: ghga/auth-service:1.0.0
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_started
    env_file: ums.env
    environment:
      AUTH_SERVICE_HOST: 0.0.0.0
      AUTH_SERVICE_INCLUDE_APIS: '["users", "claims"]'
      AUTH_SERVICE_ADD_AS_DATA_STEWARDS: >
        [{
          "ext_id": "id-of-data-steward@ghga.dev",
          "name": "Data Steward",
          "email": "data.steward@home.org"
        }]
      AUTH_SERVICE_DB_URL: mongodb://testbed_user:testbed_key@mongodb
      AUTH_SERVICE_DB_NAME: auth
      AUTH_SERVICE_LOG_LEVEL: debug
      AUTH_SERVICE_DATASET_DELETION_EVENT_TOPIC: metadata_datasets
      AUTH_SERVICE_DATASET_DELETION_EVENT_TYPE: dataset_deleted
      AUTH_SERVICE_SERVICE_INSTANCE_ID: rest.1
      AUTH_SERVICE_KAFKA_SERVERS: '["kafka:9092"]'

  ums-consumer:
    image: ghga/auth-service:1.0.0
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_started
    env_file: ums.env
    environment:
      AUTH_SERVICE_HOST: 0.0.0.0
      AUTH_SERVICE_INCLUDE_APIS: '[]'
      AUTH_SERVICE_DB_URL: mongodb://testbed_user:testbed_key@mongodb
      AUTH_SERVICE_DB_NAME: auth
      AUTH_SERVICE_LOG_LEVEL: debug
      AUTH_SERVICE_DATASET_DELETION_EVENT_TOPIC: metadata_datasets
      AUTH_SERVICE_DATASET_DELETION_EVENT_TYPE: dataset_deleted
      AUTH_SERVICE_SERVICE_INSTANCE_ID: consumer.1
      AUTH_SERVICE_KAFKA_SERVERS: '["kafka:9092"]'

  # auth adapter
  auth:
    image: ghga/auth-service:1.0.0
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_started
    env_file: auth.env
    environment:
      AUTH_SERVICE_HOST: 0.0.0.0
      AUTH_SERVICE_INCLUDE_APIS: '[]'
      AUTH_SERVICE_RUN_AUTH_ADAPTER: "true"
      AUTH_SERVICE_API_EXT_PATH: ''
      AUTH_SERVICE_OIDC_AUTHORITY_URL: http://op.test
      AUTH_SERVICE_OIDC_USERINFO_ENDPOINT: http://op.test/userinfo
      AUTH_SERVICE_OIDC_CLIENT_ID: test-client
      AUTH_SERVICE_DB_URL: mongodb://testbed_user:testbed_key@mongodb
      AUTH_SERVICE_DB_NAME: auth
      AUTH_SERVICE_LOG_LEVEL: debug

  # fake OpenID Connect provider
  op.test:
    image: ghga/test-oidc-provider:1.0.0
    restart: unless-stopped
    environment:
      TOP_HOST: 0.0.0.0
      TOP_PORT: 80
      TOP_ISSUER: https://test-aai.ghga.dev
      TOP_SERVICE_URL: http://op.test

  wps:
    image: ghga/work-package-service:0.1.4
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_started
      wps-consumer:
        condition: service_started
    env_file: wps.env
    environment:
      WPS_HOST: 0.0.0.0
      WPS_SERVICE_INSTANCE_ID: rest.1
      WPS_KAFKA_SERVERS: '["kafka:9092"]'
      WPS_DB_CONNECTION_STR: mongodb://testbed_user:testbed_key@mongodb
      WPS_DATASET_CHANGE_EVENT_TOPIC: metadata_datasets
      WPS_DATASET_DELETION_EVENT_TYPE: dataset_deleted
      WPS_DATASET_UPSERTION_EVENT_TYPE: dataset_created
      WPS_DOWNLOAD_ACCESS_URL: http://ums:8080/download-access
      WPS_DB_NAME: wps
    command: run-rest

  wps-consumer:
    image: ghga/work-package-service:0.1.4
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_started
    env_file: wps.env
    environment:
      WPS_HOST: 0.0.0.0
      WPS_SERVICE_INSTANCE_ID: consumer.1
      WPS_KAFKA_SERVERS: '["kafka:9092"]'
      WPS_DB_CONNECTION_STR: mongodb://testbed_user:testbed_key@mongodb
      WPS_DATASET_CHANGE_EVENT_TOPIC: metadata_datasets
      WPS_DATASET_DELETION_EVENT_TYPE: dataset_deleted
      WPS_DATASET_UPSERTION_EVENT_TYPE: dataset_created
      WPS_DOWNLOAD_ACCESS_URL: http://ums:8080/download-access
      WPS_DB_NAME: wps
    command: consume-events

  ars:
    image: ghga/access-request-service:1.0.0
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_started
    env_file: ars.env
    environment:
      ARS_HOST: 0.0.0.0
      ARS_SERVICE_INSTANCE_ID: rest.1
      ARS_KAFKA_SERVERS: '["kafka:9092"]'
      ARS_NOTIFICATION_EVENT_TOPIC: notifications
      ARS_NOTIFICATION_EVENT_TYPE: notification
      ARS_DATA_STEWARD_EMAIL: "helpdesk@ghga.de"
      ARS_DB_CONNECTION_STR: mongodb://testbed_user:testbed_key@mongodb
      ARS_DOWNLOAD_ACCESS_URL: http://ums:8080/download-access
      ARS_DB_NAME: ars

  fis:
    image: ghga/file-ingest-service:1.1.1
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    env_file: fis.env
    environment:
      FIS_HOST: 0.0.0.0
      FIS_PORT: 8080
      FIS_SERVICE_INSTANCE_ID: rest.1
      FIS_KAFKA_SERVERS: '["kafka:9092"]'
      FIS_PUBLISHER_TOPIC: interrogations
      FIS_PUBLISHER_TYPE: validation_success
      FIS_SELECTED_STORAGE_ALIAS: test
      FIS_SOURCE_BUCKET_ID: staging
      FIS_VAULT_URL: http://vault:8200
      FIS_VAULT_PATH: ekss
      FIS_VAULT_KUBE_ROLE: ""
      FIS_VAULT_ROLE_ID: 9f03d595-c964-441c-a68e-2e1534f2bb56
      FIS_VAULT_SECRET_ID: a3e80b1d-86d3-4c23-85ee-589031ec2cba

  ns:
    image: ghga/notification-service:0.1.2
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      NS_NOTIFICATION_EVENT_TOPIC: notifications
      NS_NOTIFICATION_EVENT_TYPE: notification
      NS_SERVICE_INSTANCE_ID: consumer.1
      NS_KAFKA_SERVERS: '["kafka:9092"]'
      NS_PLAINTEXT_EMAIL_TEMPLATE: '"Dear $$recipient_name,\n\n$$plaintext_body\n\nWarm regards,\n\nThe GHGA Team"'
      NS_HTML_EMAIL_TEMPLATE: '<!DOCTYPE html><html><head></head><body style="color: #00393f;padding: 12px;"><h2>Dear $$recipient_name,</h2><p>$$plaintext_body</p><p>Warm regards,</p><h3>The GHGA Team</h3></body></html>'
      NS_SMTP_HOST: mailhog
      NS_SMTP_PORT: 1025
      NS_LOGIN_USER: "test@test.com"
      NS_LOGIN_PASSWORD: test
      NS_FROM_ADDRESS: "test@test.com"
      NS_USE_STARTTLS: "false"

  mailhog:
    image: mailhog/mailhog:v1.0.1
    ports:
      - 8025:8025

  mongodb:
    image: mongo:7.0.3
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: testbed_user
      MONGO_INITDB_ROOT_PASSWORD: testbed_key
    ports:
      - 44441:27017

  mongo-express:
    image: mongo-express:1.0.0
    restart: unless-stopped
    depends_on:
      - mongodb
    ports:
      - 8088:8081
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://testbed_user:testbed_key@mongodb
      ME_CONFIG_BASICAUTH_USERNAME: dev
      ME_CONFIG_BASICAUTH_PASSWORD: dev
      ME_CONFIG_MONGODB_ENABLE_ADMIN: "true"

  kafka:
    image: confluentinc/cp-kafka:7.5.1
    restart: unless-stopped
    depends_on:
      - zookeeper
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics",
          "--list",
          "--bootstrap-server",
          "localhost:9092"
        ]
      interval: 5s
      timeout: 5s
      start_period: 60s
      retries: 12
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - 9092:9092

  kafka-ui:
    image: provectuslabs/kafka-ui
    restart: unless-stopped
    depends_on:
      - kafka
      - zookeeper
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - 8089:8080

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  localstack:
    image: localstack/localstack:2.0.2
    environment:
      SERVICES: s3
      AWS_DEFAULT_REGION: eu-west-1
      LOCALSTACK_HOST: localhost
      AWS_ACCESS_KEY_ID: testbed-key
      AWS_SECRET_ACCESS_KEY: testbed-secret
      PERSISTENCE: 1
      DEBUG: 1
    volumes:
      - type: volume
        source: s3_fs
        target: /var/lib/localstack
        volume:
          nocopy: true
      - ./init-scripts/localstack:/etc/localstack/init/ready.d:ro
    ports:
      - 4566:4566

  vault:
    image: hashicorp/vault:1.12
    ports:
      - "8200:8200"
    environment:
      VAULT_ADDR: "http://0.0.0.0:8200"
      VAULT_DEV_ROOT_TOKEN_ID: dev-token
    cap_add:
      - IPC_LOCK

  vault-init:
    image: hashicorp/vault:1.12
    depends_on:
      - vault
    environment:
      VAULT_ADDR: "http://vault:8200"
    volumes:
      - ./init-scripts/vault:/docker-entrypoint.d:ro
    entrypoint: ./docker-entrypoint.d/setup.sh

volumes:
  s3_fs: {}
