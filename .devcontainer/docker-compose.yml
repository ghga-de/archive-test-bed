version: '3'

services:

  app:
    container_name: archive-test-bed
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        # Python version: 3, 3.11, 3.10, 3.9
        VARIANT: 3.9
        # You may need to change USER_UID and USER_GID if your local UID is different
        USER_UID: 1000
        USER_GID: 1000

    depends_on:
      kafka:
        condition: service_healthy

    init: true
    privileged: true

    volumes:
      - ..:/workspace:cached

    # Overrides default command so things don't shut down after the process ends.
    command: sleep infinity

    user: vscode
    env_file: tb.env
    environment:
      # GHGA connector
      GHGA_CONNECTOR_PART_SIZE: 8589934592
      GHGA_CONNECTOR_WKVS_API_URL: http://wkvs

      # Kafka
      TB_SERVICE_NAME: testbed_kafka
      TB_SERVICE_INSTANCE_ID: testbed-app-1
      TB_KAFKA_SERVERS: '["kafka:9092"]'
      # MongoDb
      TB_DB_CONNECTION_STR: mongodb://testbed_user:testbed_key@mongodb
      # S3
      TB_S3_ENDPOINT_URL: http://localstack:4566
      TB_S3_ACCESS_KEY_ID: testbed-key
      TB_S3_SECRET_ACCESS_KEY: testbed-secret
      # file services
      TB_FILE_METADATA_EVENT_TOPIC: metadata
      TB_FILE_METADATA_EVENT_TYPE: file_metadata_upserts
      # bucket names
      TB_INBOX_BUCKET: inbox
      TB_OUTBOX_BUCKET: outbox
      TB_STAGING_BUCKET: staging
      TB_PERMANENT_BUCKET: permanent
      # file ingest
      TB_FILE_INGEST_URL: http://fis:8080/ingest
      TB_METLDATA_URL: http://metldata:8080

  wkvs:
    image: ghga/well-known-value-service:0.1.1
    env_file: wkvs.env
    environment:
      WKVS_HOST: 0.0.0.0
      WKVS_PORT: 80
      WKVS_DCS_API_URL: http://dcs:8080
      WKVS_UCS_API_URL: http://ucs:8080
      WKVS_WPS_API_URL: http://wps:8080

  metldata:
    image: ghga/metldata:0.3.7
    env_file: metldata.env
    environment:
      METLDATA_HOST: 0.0.0.0
      METLDATA_PORT: 8080
      METLDATA_DB_CONNECTION_STR: mongodb://testbed_user:testbed_key@mongodb
      METLDATA_DB_NAME: metldata
    volumes:
      - ./metldata.yaml:/home/appuser/.metldata.yaml:ro

  ekss:
    image: ghga/encryption-key-store-service:0.3.5
    depends_on:
      - vault
    env_file: ekss.env
    environment:
      EKSS_HOST: 0.0.0.0
      EKSS_PORT: 80
      EKSS_DEBUG_VAULT: "true"
      EKSS_VAULT_HOST: vault
      EKSS_VAULT_PORT: 8200
      EKSS_VAULT_ROLE_ID: 9f03d595-c964-441c-a68e-2e1534f2bb56
      EKSS_VAULT_SECRET_ID: a3e80b1d-86d3-4c23-85ee-589031ec2cba

  dcs:
    image: ghga/download-controller-service:0.6.4
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_started
      dcs-consumer:
        condition: service_started
    env_file: dcs.env
    environment:
      DCS_HOST: 0.0.0.0
      DCS_DOWNLOAD_SERVED_EVENT_TOPIC: downloads
      DCS_DOWNLOAD_SERVED_EVENT_TYPE: drs_object_served
      DCS_FILE_REGISTERED_EVENT_TOPIC: downloads
      DCS_FILE_REGISTERED_EVENT_TYPE: drs_object_registered
      DCS_FILES_TO_REGISTER_TOPIC: internal_registrations
      DCS_FILES_TO_REGISTER_TYPE: internal_file_registered
      DCS_UNSTAGED_DOWNLOAD_EVENT_TOPIC: downloads
      DCS_UNSTAGED_DOWNLOAD_EVENT_TYPE: unstaged_drs_object_requested
      DCS_FILES_TO_DELETE_TOPIC: purges
      DCS_FILES_TO_DELETE_TYPE: files_to_delete
      DCS_FILE_DELETED_EVENT_TOPIC: downloads
      DCS_FILE_DELETED_EVENT_TYPE: drs_object_deleted
      DCS_SERVICE_INSTANCE_ID: dcs-rest-1
      DCS_KAFKA_SERVERS: '["kafka:9092"]'
      DCS_DB_CONNECTION_STR: mongodb://testbed_user:testbed_key@mongodb
      DCS_DB_NAME: dcs
      DCS_OUTBOX_BUCKET: outbox
      DCS_DRS_SERVER_URI: drs://localhost:8080/
      DCS_S3_ENDPOINT_URL: http://localstack:4566
      DCS_S3_ACCESS_KEY_ID: testbed-key
      DCS_S3_SECRET_ACCESS_KEY: testbed-secret
      DCS_EKSS_BASE_URL: http://ekss
      DCS_PRESIGNED_URL_EXPIRES_AFTER: 30
    command: "run-rest"

  dcs-consumer:
    image: ghga/download-controller-service:0.6.4
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_started
    env_file: dcs.env
    environment:
      DCS_HOST: 0.0.0.0
      DCS_DOWNLOAD_SERVED_EVENT_TOPIC: downloads
      DCS_DOWNLOAD_SERVED_EVENT_TYPE: drs_object_served
      DCS_FILE_REGISTERED_EVENT_TOPIC: downloads
      DCS_FILE_REGISTERED_EVENT_TYPE: drs_object_registered
      DCS_FILES_TO_REGISTER_TOPIC: internal_registrations
      DCS_FILES_TO_REGISTER_TYPE: internal_file_registered
      DCS_UNSTAGED_DOWNLOAD_EVENT_TOPIC: downloads
      DCS_UNSTAGED_DOWNLOAD_EVENT_TYPE: unstaged_drs_object_requested
      DCS_FILES_TO_DELETE_TOPIC: purges
      DCS_FILES_TO_DELETE_TYPE: files_to_delete
      DCS_FILE_DELETED_EVENT_TOPIC: downloads
      DCS_FILE_DELETED_EVENT_TYPE: drs_object_deleted
      DCS_SERVICE_INSTANCE_ID: dcs-consumer-1
      DCS_KAFKA_SERVERS: '["kafka:9092"]'
      DCS_DB_CONNECTION_STR: mongodb://testbed_user:testbed_key@mongodb
      DCS_DB_NAME: dcs
      DCS_OUTBOX_BUCKET: outbox
      DCS_DRS_SERVER_URI: drs://localhost:8080/
      DCS_S3_ENDPOINT_URL: http://localstack:4566
      DCS_S3_ACCESS_KEY_ID: testbed-key
      DCS_S3_SECRET_ACCESS_KEY: testbed-secret
      DCS_EKSS_BASE_URL: http://ekss
      DCS_PRESIGNED_URL_EXPIRES_AFTER: 30
    command: "consume-events"

  ifrs:
    image: ghga/internal-file-registry-service:0.4.0
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_started
    environment:
      IFRS_FILE_REGISTERED_EVENT_TOPIC: internal_registrations
      IFRS_FILE_REGISTERED_EVENT_TYPE: internal_file_registered
      IFRS_FILE_STAGED_EVENT_TOPIC: internal_registrations
      IFRS_FILE_STAGED_EVENT_TYPE: internal_file_staged
      IFRS_FILES_TO_REGISTER_TOPIC: interrogations
      IFRS_FILES_TO_REGISTER_TYPE: validation_success
      IFRS_FILES_TO_STAGE_TOPIC: downloads
      IFRS_FILES_TO_STAGE_TYPE: unstaged_drs_object_requested
      IFRS_FILE_DELETED_EVENT_TOPIC: internal_registrations
      IFRS_FILE_DELETED_EVENT_TYPE: internal_file_deleted
      IFRS_FILES_TO_DELETE_TOPIC: purges
      IFRS_FILES_TO_DELETE_TYPE: files_to_delete
      IFRS_OUTBOX_BUCKET: outbox
      IFRS_INBOX_BUCKET: inbox
      IFRS_STAGING_BUCKET: staging
      IFRS_PERMANENT_BUCKET: permanent
      IFRS_SERVICE_INSTANCE_ID: ifrs-1
      IFRS_KAFKA_SERVERS: '["kafka:9092"]'
      IFRS_DB_CONNECTION_STR: mongodb://testbed_user:testbed_key@mongodb
      IFRS_DB_NAME: ifrs
      IFRS_S3_ENDPOINT_URL: http://localstack:4566
      IFRS_S3_ACCESS_KEY_ID: testbed-key
      IFRS_S3_SECRET_ACCESS_KEY: testbed-secret

  crs:
    image: ghga/auth-service:0.5.1
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_started
    env_file: crs.env
    environment:
      AUTH_SERVICE_HOST: 0.0.0.0
      AUTH_SERVICE_INCLUDE_APIS: '["claims"]'
      AUTH_SERVICE_ADD_AS_DATA_STEWARDS: '["id-of-data-steward"]'
      AUTH_SERVICE_DB_URL: mongodb://testbed_user:testbed_key@mongodb
      AUTH_SERVICE_DB_NAME: auth

  wps:
    image: ghga/work-package-service:0.1.3
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_started
    env_file: wps.env
    environment:
      WPS_HOST: 0.0.0.0
      WPS_SERVICE_INSTANCE_ID: wps-rest-1
      WPS_KAFKA_SERVERS: '["kafka:9092"]'
      WPS_DB_CONNECTION_STR: mongodb://testbed_user:testbed_key@mongodb
      WPS_DATASET_OVERVIEW_EVENT_TOPIC: metadata
      WPS_DATASET_OVERVIEW_EVENT_TYPE: metadata_dataset_overview
      WPS_DOWNLOAD_ACCESS_URL: http://crs:8080/download-access
      WPS_DB_NAME: wps
    command: run-rest

  wps-consumer:
    image: ghga/work-package-service:0.1.3
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_started
    env_file: wps.env
    environment:
      WPS_HOST: 0.0.0.0
      WPS_SERVICE_INSTANCE_ID: wps-consumer-1
      WPS_KAFKA_SERVERS: '["kafka:9092"]'
      WPS_DB_CONNECTION_STR: mongodb://testbed_user:testbed_key@mongodb
      WPS_DATASET_OVERVIEW_EVENT_TOPIC: metadata
      WPS_DATASET_OVERVIEW_EVENT_TYPE: metadata_dataset_overview
      WPS_DOWNLOAD_ACCESS_URL: http://crs:8080/download-access
      WPS_DB_NAME: wps
    command: consume-events

  ars:
    image: ghga/access-request-service:0.1.1
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_started
    env_file: ars.env
    environment:
      ARS_HOST: 0.0.0.0
      ARS_SERVICE_INSTANCE_ID: ars-rest-1
      ARS_KAFKA_SERVERS: '["kafka:9092"]'
      ARS_NOTIFICATION_EVENT_TOPIC: notifications
      ARS_NOTIFICATION_EVENT_TYPE: notification
      ARS_DATA_STEWARD_EMAIL: "helpdesk@ghga.de"
      ARS_DB_CONNECTION_STR: mongodb://testbed_user:testbed_key@mongodb
      ARS_DOWNLOAD_ACCESS_URL: http://crs:8080/download-access
      ARS_DB_NAME: ars

  fis:
    image: ghga/file-ingest-service:0.1.3
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    env_file: fis.env
    environment:
      FIS_HOST: 0.0.0.0
      FIS_PORT: 8080
      FIS_SERVICE_INSTANCE_ID: testbed-fis-1
      FIS_KAFKA_SERVERS: '["kafka:9092"]'
      FIS_PUBLISHER_TOPIC: interrogations
      FIS_PUBLISHER_TYPE: validation_success
      FIS_SOURCE_BUCKET_ID: staging
      FIS_DEBUG_VAULT: "true"
      FIS_VAULT_HOST: vault
      FIS_VAULT_PORT: 8200
      FIS_VAULT_ROLE_ID: 9f03d595-c964-441c-a68e-2e1534f2bb56
      FIS_VAULT_SECRET_ID: a3e80b1d-86d3-4c23-85ee-589031ec2cba

  mongodb:
    image: mongo:latest
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: testbed_user
      MONGO_INITDB_ROOT_PASSWORD: testbed_key
    ports:
      - 44441:27017

  mongo-express:
    image: mongo-express:latest
    restart: unless-stopped
    depends_on:
      - mongodb
    ports:
      - 8088:8081
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://testbed_user:testbed_key@mongodb

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    restart: unless-stopped
    depends_on:
      - zookeeper
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics",
          "--list",
          "--bootstrap-server",
          "localhost:9092"
        ]
      interval: 5s
      timeout: 5s
      start_period: 60s
      retries: 12
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    ports:
      - 9092:9092

  kafka-ui:
    image: provectuslabs/kafka-ui
    restart: unless-stopped
    depends_on:
      - kafka
      - zookeeper
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    ports:
      - 8089:8080

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  localstack:
    image: localstack/localstack:2.0.2
    environment:
      SERVICES: s3
      AWS_DEFAULT_REGION: eu-west-1
      LOCALSTACK_HOST: localhost
      AWS_ACCESS_KEY_ID: testbed-key
      AWS_SECRET_ACCESS_KEY: testbed-secret
      PERSISTENCE: 1
      DEBUG: 1
    volumes:
      - type: volume
        source: s3_fs
        target: /var/lib/localstack
        volume:
          nocopy: true
      - ./init-scripts/localstack:/etc/localstack/init/ready.d:ro

  vault:
    image: hashicorp/vault:1.12
    ports:
      - "8200:8200"
    environment:
      VAULT_ADDR: "http://0.0.0.0:8200"
      VAULT_DEV_ROOT_TOKEN_ID: dev-token
    cap_add:
      - IPC_LOCK

  vault-init:
    image: hashicorp/vault:1.12
    depends_on:
      - vault
    environment:
      VAULT_ADDR: "http://vault:8200"
    volumes:
      - ./init-scripts/vault:/docker-entrypoint.d:ro
    entrypoint: ./docker-entrypoint.d/setup.sh

volumes:
  s3_fs: {}
